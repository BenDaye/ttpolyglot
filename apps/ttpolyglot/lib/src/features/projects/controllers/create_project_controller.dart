import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:ttpolyglot/src/features/features.dart';
import 'package:ttpolyglot_core/core.dart';

/// 创建项目控制器
class CreateProjectController extends GetxController {
  // 表单键
  final formKey = GlobalKey<FormState>();

  // 步骤控制
  final _currentStep = 0.obs;
  int get currentStep => _currentStep.value;

  // 项目信息
  final nameController = TextEditingController();
  final slugController = TextEditingController();
  final descriptionController = TextEditingController();

  // 可见性选项
  final _visibility = 'private'.obs;
  String get visibility => _visibility.value;

  // 主语言
  final Rx<Language?> _primaryLanguage = Rx<Language?>(null);
  Language? get primaryLanguage => _primaryLanguage.value;

  // 目标语言
  final _targetLanguages = <Language>[].obs;
  List<Language> get targetLanguages => _targetLanguages;

  // 通知设置
  final _emailNotificationsEnabled = true.obs;
  bool get emailNotificationsEnabled => _emailNotificationsEnabled.value;

  final _inAppNotificationsEnabled = true.obs;
  bool get inAppNotificationsEnabled => _inAppNotificationsEnabled.value;

  // 加载状态
  final _isLoading = false.obs;
  bool get isLoading => _isLoading.value;

  // 所有可用语言
  final _availableLanguages = <Language>[].obs;
  List<Language> get availableLanguages => _availableLanguages;

  @override
  void onInit() {
    super.onInit();
    _loadAvailableLanguages();
    _setupSlugGeneration();
  }

  @override
  void onClose() {
    nameController.dispose();
    slugController.dispose();
    descriptionController.dispose();
    super.onClose();
  }

  /// 加载可用语言列表
  Future<void> _loadAvailableLanguages() async {
    try {
      // TODO: 从服务端加载语言列表
      // 暂时使用示例数据
      _availableLanguages.value = [
        const Language(code: 'zh-CN', name: '中文（简体）', nativeName: '中文（简体）'),
        const Language(code: 'en-US', name: 'English (United States)', nativeName: 'English (United States)'),
        const Language(code: 'zh-TW', name: '中文（繁體）', nativeName: '中文（繁體）'),
        const Language(code: 'ja-JP', name: '日本語', nativeName: '日本語'),
        const Language(code: 'sv-SE', name: 'Svenska', nativeName: 'Svenska'),
      ];
    } catch (error, stackTrace) {
      Logger.error('加载语言列表失败', error: error, stackTrace: stackTrace);
    }
  }

  /// 设置自动生成 slug
  void _setupSlugGeneration() {
    nameController.addListener(() {
      if (slugController.text.isEmpty || _isSlugAutoGenerated) {
        slugController.text = _generateSlug(nameController.text);
      }
    });
  }

  bool _isSlugAutoGenerated = true;

  /// 生成 slug
  String _generateSlug(String name) {
    // 简单的 slug 生成逻辑
    return name.toLowerCase().replaceAll(RegExp(r'[\s\W]+'), '-').replaceAll(RegExp(r'^-+|-+$'), '');
  }

  /// 设置可见性
  void setVisibility(String value) {
    _visibility.value = value;
  }

  /// 设置主语言
  void setPrimaryLanguage(Language? language) {
    _primaryLanguage.value = language;
  }

  /// 添加目标语言
  void addTargetLanguage(Language language) {
    if (!_targetLanguages.contains(language) && language != _primaryLanguage.value) {
      _targetLanguages.add(language);
    }
  }

  /// 移除目标语言
  void removeTargetLanguage(Language language) {
    _targetLanguages.remove(language);
  }

  /// 切换邮件通知
  void toggleEmailNotifications(bool value) {
    _emailNotificationsEnabled.value = value;
  }

  /// 切换站内通知
  void toggleInAppNotifications(bool value) {
    _inAppNotificationsEnabled.value = value;
  }

  /// 下一步
  void nextStep() {
    if (_currentStep.value < 3) {
      if (_validateCurrentStep()) {
        _currentStep.value++;
      }
    }
  }

  /// 上一步
  void previousStep() {
    if (_currentStep.value > 0) {
      _currentStep.value--;
    }
  }

  /// 验证当前步骤
  bool _validateCurrentStep() {
    switch (_currentStep.value) {
      case 0:
        // 验证项目信息
        if (!formKey.currentState!.validate()) {
          return false;
        }
        if (nameController.text.trim().isEmpty) {
          Get.snackbar('错误', '请输入项目名称');
          return false;
        }
        if (slugController.text.trim().isEmpty) {
          Get.snackbar('错误', '请输入项目标识');
          return false;
        }
        return true;

      case 1:
        // 验证语言配置
        if (_primaryLanguage.value == null) {
          Get.snackbar('错误', '请选择主语言');
          return false;
        }
        if (_targetLanguages.isEmpty) {
          Get.snackbar('错误', '请至少选择一个目标语言');
          return false;
        }
        return true;

      case 2:
        // 成员邀请（可选）
        return true;

      case 3:
        // 通知设置（可选）
        return true;

      default:
        return true;
    }
  }

  /// 创建项目
  Future<void> createProject() async {
    if (!_validateCurrentStep()) {
      return;
    }

    try {
      _isLoading.value = true;

      // 调用项目创建 API
      // 注意：此应用使用本地文件系统存储，而非远程服务器
      // 如果需要服务器版本，请使用以下代码：
      /*
      final projectApi = ProjectApi(); // 需要注入
      final request = CreateProjectRequest(
        name: nameController.text.trim(),
        slug: slugController.text.trim(),
        description: descriptionController.text.trim(),
        status: 'active',
        visibility: visibility,
        primaryLanguageCode: primaryLanguage?.code,
        settings: {},
      );
      
      final project = await projectApi.createProject(request);
      
      // 初始化通知设置
      if (primaryLanguage != null) {
        final notificationApi = NotificationSettingsApi();
        await notificationApi.initializeDefaultSettings(
          projectId: project.id,
        );
      }
      */

      // 调用本地项目服务创建项目
      await ProjectsController.createProject(
        name: nameController.text.trim(),
        description: descriptionController.text.trim(),
        primaryLanguage: _primaryLanguage.value!,
        targetLanguages: _targetLanguages.toList(),
      );

      Get.back();
      Get.snackbar('成功', '项目创建成功');

      // 刷新项目列表
      await ProjectsController.loadProjects();
    } catch (error, stackTrace) {
      Logger.error('创建项目失败', error: error, stackTrace: stackTrace);
      Get.snackbar('错误', '创建项目失败: $error');
    } finally {
      _isLoading.value = false;
    }
  }

  /// 取消创建
  void cancel() {
    Get.back();
  }

  /// 验证项目名称
  String? validateName(String? value) {
    if (value == null || value.trim().isEmpty) {
      return '请输入项目名称';
    }
    if (value.trim().length < 2) {
      return '项目名称至少需要 2 个字符';
    }
    if (value.trim().length > 100) {
      return '项目名称不能超过 100 个字符';
    }
    return null;
  }

  /// 验证 slug
  String? validateSlug(String? value) {
    if (value == null || value.trim().isEmpty) {
      return '请输入项目标识';
    }
    if (!RegExp(r'^[a-z0-9-]+$').hasMatch(value)) {
      return '项目标识只能包含小写字母、数字和连字符';
    }
    if (value.length < 3) {
      return '项目标识至少需要 3 个字符';
    }
    if (value.length > 50) {
      return '项目标识不能超过 50 个字符';
    }
    return null;
  }
}
